package co.edu.icesi.demo.service;

import co.edu.icesi.demo.dto.AccountCreateDTO;
import co.edu.icesi.demo.mapper.AccountMapper;
import co.edu.icesi.demo.model.IcesiAccount;
import co.edu.icesi.demo.repository.AccountRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Random;
import java.util.UUID;
import java.util.function.Supplier;

@Service
@AllArgsConstructor
public class AccountService {


    private AccountRepository accountRepository;

    private AccountMapper accountMapper;

    public IcesiAccount save(AccountCreateDTO account){
        if(account.getBalance()<0){
            throw new RuntimeException("Account balance can't be below 0");
        }
        if(account.getBalance()==0){
            account.setActive(false);
        }else{
            account.setActive(true);
        }



        IcesiAccount icesiAccount= accountMapper.fromIcesiAccountDTO(account);
        icesiAccount.setAccountId(UUID.randomUUID());
        icesiAccount.setAccountNumber(accountNumberSupplier().get());
        boolean exit=false;
        while(!exit) {
            if (!accountRepository.findByAccountNumber(icesiAccount.getAccountNumber()).isPresent()) {
                exit=true;
            }
        }
        return accountRepository.save(icesiAccount);

    }

    private Supplier<String> accountNumberSupplier(){
        return ()->generateAccountNumber();
    }

    private String generateAccountNumber(){
        int max=57;
        int min=48;
        int length=11;
        Random random = new Random();
        String str = random.ints(min,max+1)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint,StringBuilder::append)
                .toString();

        return String.format("%s-%s-%s", str.substring(0,3),str.substring(3,9),str.substring(9,11));
    }


    /*

    **Accounts marked as deposit can't transfer or be transferred money, only withdrawal and deposit.
    Accounts balance can't be below 0.
    Accounts number should be unique.
    Accounts number should have the format xxx-xxxxxx-xx where x are numbers [0-9].
    Account number is generated by the service.
    Account Id is generated by the service.
    Account can only be disabled if the balance is 0.

     */

    public void withdrawalMoney(IcesiAccount icesiAccount, long money){
        if(money>=0 ){
            icesiAccount.setBalance(icesiAccount.getBalance()-money);
        }else {
            throw new RuntimeException("The amount of money can't be a negative value");
        }

    }

    public void depositMoney(){

    }
    public void transferMoney(){

    }

    public void changeState(){

    }

}

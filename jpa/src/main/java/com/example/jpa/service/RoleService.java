package com.example.jpa.service;

import com.example.jpa.dto.RoleDTO;
import com.example.jpa.error.exceptions.RoleException;
import com.example.jpa.error.util.IcesiError;
import com.example.jpa.error.util.IcesiErrorCode;
import com.example.jpa.error.util.IcesiErrorDetail;
import com.example.jpa.mapper.RoleMapper;
import com.example.jpa.model.IcesiRole;
import com.example.jpa.repository.RoleRepository;
import lombok.AllArgsConstructor;
import lombok.SneakyThrows;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class RoleService {

    private final RoleRepository roleRepository;
    private final RoleMapper roleMapper;

    @SneakyThrows
    public IcesiRole save(RoleDTO roleDTO){
        validateRoleNameIsNotBlank(roleDTO.getName());
        //Role name should be unique
        if (roleRepository.getByName(roleDTO.getName()).isPresent()){
            throw new RoleException("Role name already exists");
        }else{
            IcesiRole role = roleMapper.fromRoleDTO(roleDTO);
            role.setRoleId(UUID.randomUUID()); //Role ID is generated by the service
            role.setIcesiUserList(new ArrayList<>());
            return roleRepository.save(role);
        }
    }

    private void validateRoleNameIsNotBlank(String name) {
        if(name.isBlank()) {
            throw new RoleException(IcesiError.builder()
                    .status(HttpStatus.BAD_REQUEST)
                    .details(List.of(IcesiErrorDetail.builder()
                            .errorCode(IcesiErrorCode.ERR_400)
                            .errorMessage("Role name is required")
                            .build()))
                    .build());
        }
    }

    //We'll validate if is necessary to handle the ID like String or UUID
    public RoleDTO getRole(String roleId){
        return roleRepository.findById(roleId).map(roleMapper::fromRole).orElseThrow(() -> new RoleException("Role not found"));
    }

    public List<RoleDTO> getRoles(){
        return roleRepository.findAll().stream().map(roleMapper::fromRole).collect(Collectors.toList());
    }
}

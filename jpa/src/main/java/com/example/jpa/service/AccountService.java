package com.example.jpa.service;

import com.example.jpa.dto.AccountRequestDTO;
import com.example.jpa.dto.AccountResponseDTO;
import com.example.jpa.dto.InactiveAccountException;
import com.example.jpa.exceptions.AccountNotFoundException;
import com.example.jpa.exceptions.AccountTypeException;
import com.example.jpa.exceptions.BalanceNegativeException;
import com.example.jpa.exceptions.UserNotFoundException;
import com.example.jpa.mapper.AccountMapper;
import com.example.jpa.model.IcesiAccount;
import com.example.jpa.model.IcesiUser;
import com.example.jpa.repository.AccountRepository;
import com.example.jpa.repository.UserRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Service
@AllArgsConstructor
public class AccountService {

    private final AccountRepository accountRepository;
    private final AccountMapper accountMapper;
    private final UserRepository userRepository;

    public AccountResponseDTO save(AccountRequestDTO accountDTO) {
        IcesiAccount account = accountMapper.fromAccountDTO(accountDTO);
        if(account.getBalance() < 0){ //Balance can't be below 0
          throw new BalanceNegativeException("Balance can't be negative");
        } else if(userRepository.findByEmail(account.getUser().getEmail()).isPresent()){ //User must exist
            IcesiUser icesiUser = userRepository.findByEmail(account.getUser().getEmail()).get();
            account.setId(UUID.randomUUID()); //Account ID is generated by the service
            account.setAccountNumber(validateAccountNumber(generateAccountNumber()));
            account.setActive(true);
            account.setType(accountDTO.getType());
            account.setUser(icesiUser);
            userRepository.findByEmail(accountDTO.getUser().getEmail()).get()
                    .getIcesiAccountList().add(account); //Add account to user account list
            accountRepository.save(account);
            userRepository.save(icesiUser);
            return accountMapper.fromAccountToSendAccountDTO(account);
        } else {
            throw new UserNotFoundException("User not found");
        }
    }

    //Accounts number should have the format xxx-xxxxxx-xx where x are numbers [0-9].
    //Account number is generated by the service
    private String generateAccountNumber() {
        IntStream intStream = new Random().ints(11, 0, 9);
        String randomNumbers = intStream
                .mapToObj(Integer::toString)
                .collect(Collectors.joining());

        return String.format("%s-%s-%s",
                randomNumbers.substring(0, 3),
                randomNumbers.substring(3, 9),
                randomNumbers.substring(9, 11));
    }

    private String validateAccountNumber(String accountNumber){
        //Accounts number should be unique
        if(accountRepository.findByAccountNumber(accountNumber)){
            return validateAccountNumber(generateAccountNumber());
        }
        return accountNumber;
    }

    //Enable account if balance is positive
    public boolean enableAccount(String accountNumber){
        if(accountRepository.getByAccountNumber(accountNumber).isPresent()){
            IcesiAccount account = accountRepository.getByAccountNumber(accountNumber).get();
            if(account.getBalance() > 0){
                account.setActive(true);
                accountRepository.save(account);
                return true;
            }else {
                throw new BalanceNegativeException("The account has a negative balance");
            }
        }else {
            throw new AccountNotFoundException("Account not found");
        }
    }

    //Disable account if balance is 0
    public boolean disableAccount(String accountNumber){
        if(accountRepository.getByAccountNumber(accountNumber).isPresent()){
            IcesiAccount account = accountRepository.getByAccountNumber(accountNumber).get();
            if(account.getBalance() == 0){
                account.setActive(false);
                accountRepository.save(account);
                return true;
            }else {
                throw new BalanceNegativeException("The account has a positive balance, it's not recommended to disable it");
            }
        }else {
            throw new AccountNotFoundException("Account not found");
        }
    }

    //Deposit money to an account
    public boolean deposit(String accountNumber, Long amount){
        if(accountRepository.getByAccountNumber(accountNumber).isPresent()){
            IcesiAccount account = accountRepository.getByAccountNumber(accountNumber).get();
            account.setBalance(account.getBalance() + amount);
            accountRepository.save(account);
            return true;
        }else {
            throw new AccountNotFoundException("Account not found");
        }
    }

    //Withdraw money from an account
    public boolean withdraw(String accountNumber, Long amount){
        if(accountRepository.getByAccountNumber(accountNumber).isPresent()){
            IcesiAccount account = accountRepository.getByAccountNumber(accountNumber).get();
            if(account.getBalance() >= amount){
                account.setBalance(account.getBalance() - amount);
                accountRepository.save(account);
                return true;
            }else {
                throw new BalanceNegativeException("There is not enough money in the account, balance will be negative");
            }
        }else {
            throw new AccountNotFoundException("Account not found");
        }
    }

    /* Transfer money from one account to another, if the accounts are active,
     the balance is positive and the amount is less than the balance, and the type
     of the accounts is different from "deposit" */
    //TODO: Make commit of this method
    public boolean transfer(String accountNumberFrom, String accountNumberTo, Long amount){
        if(accountRepository.getByAccountNumber(accountNumberFrom).isPresent() &&
                accountRepository.getByAccountNumber(accountNumberTo).isPresent()){
            IcesiAccount accountFrom = accountRepository.getByAccountNumber(accountNumberFrom).get();
            IcesiAccount accountTo = accountRepository.getByAccountNumber(accountNumberTo).get();
            if((isEnableToTransfer(accountFrom, accountTo)) && (accountFrom.getBalance() >= amount)){
                accountFrom.setBalance(accountFrom.getBalance() - amount);
                accountTo.setBalance(accountTo.getBalance() + amount);
                accountRepository.save(accountFrom);
                accountRepository.save(accountTo);
                return true;
            }else {
                throw new BalanceNegativeException("There is not enough money in the account, balance will be negative");
            }
        }else {
            throw new AccountNotFoundException("Account not found");
        }
    }

    //TODO: Make commit of this method
    private boolean isEnableToTransfer(IcesiAccount accountFrom, IcesiAccount accountTo){
        if(accountFrom.isActive() && accountTo.isActive()) {
            if(!(accountFrom.getType().equalsIgnoreCase("deposit") ||
                    accountTo.getType().equalsIgnoreCase("deposit"))) {
                return true;
            }else{
                throw new AccountTypeException("One or both accounts are deposit only");
            }
        }else {
            throw new InactiveAccountException("One or both accounts are not active");
        }
    }

    //Get all accounts
    public List<AccountResponseDTO> getAccounts(){
        return accountRepository.getAllAccounts().stream().map(accountMapper::fromAccountToSendAccountDTO).collect(Collectors.toList());
    }
}
